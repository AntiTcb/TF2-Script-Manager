#region Header

// Description:
// 
// Solution: TF2 Script Manager
// Project: TF2 Script Manager
// 
// Created: 02/19/2016 2:09 AM
// Last Revised: 02/21/2016 11:53 AM
// Last Revised by: Alex Gravely - Alex

#endregion

namespace TF2_Script_Manager.Services {
    #region Using

    using System.Diagnostics;
    using System.IO;
    using System.Threading.Tasks;
    using Classes;

    #endregion

    public static class ConfigWriter {
        #region Public Methods

        public static async Task WriteClassConfigFile(ClassConfig config) {
            Debug.Write(Core.Settings.TF2Directory + @"\custom\" + config.Name);
            using ( var sw = new StreamWriter(Core.Settings.TF2Directory + @"\custom\" + config.Name, false) )
            {
                await sw.WriteLineAsync("// Generated by TF2 Script Manager \n// Report all bugs on GitHub!");
                if (config.Execs.Count != 0) {
                    await sw.WriteLineAsync("// EXECS");

                    foreach ( var exec in config.Execs ) { await sw.WriteLineAsync(exec.ToString()); }
                }
                if ( config.Aliases.Count != 0 )
                {
                    await sw.WriteLineAsync("// ALIASES");
                    foreach ( var alias in config.Aliases ) { await sw.WriteLineAsync(alias.ToString()); }
                }
                if ( config.Toggles.Count != 0 )
                {
                    await sw.WriteLineAsync("// TOGGLES");
                    foreach ( var toggle in config.Toggles ) { await sw.WriteLineAsync(toggle.ToString()); }
                }
                if ( config.BindToggles.Count != 0 )
                {
                    await sw.WriteLineAsync("// BINDTOGGLES");
                    foreach ( var bindtoggle in config.BindToggles ) { await sw.WriteLineAsync(bindtoggle.ToString()); }
                }
                if ( config.Keybinds.Bindings.Count == 0 ) { return; }
                await sw.WriteLineAsync("// BINDS");
                foreach ( var bind in config.Keybinds.Bindings) { await sw.WriteLineAsync(bind.ToString()); }
            }

        }

        #endregion Public Methods
    }
}